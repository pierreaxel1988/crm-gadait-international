
import React, { useState, useEffect } from 'react';
import { LeadDetailed, LeadSource, Country } from '@/types/lead';
import FormInput from '../FormInput';

interface MobileGeneralInfoSectionProps {
  lead: LeadDetailed;
  onDataChange: (data: Partial<LeadDetailed>) => void;
  countries?: Country[];
  sources?: LeadSource[];
}

const LANGUAGE_OPTIONS = [
  { value: "Fran√ßais", label: "Fran√ßais" },
  { value: "English", label: "English" },
  { value: "Espa√±ol", label: "Espa√±ol" },
  { value: "Deutsch", label: "Deutsch" },
  { value: "Italiano", label: "Italiano" },
  { value: "–†—É—Å—Å–∫–∏–π", label: "–†—É—Å—Å–∫–∏–π" },
  { value: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", label: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©" },
  { value: "Nederlands", label: "Nederlands" },
  { value: "Portugu√™s", label: "Portugu√™s" },
  { value: "‰∏≠Êñá", label: "‰∏≠Êñá" }
];

// Default source options for when no sources are provided
const DEFAULT_SOURCES: LeadSource[] = [
  "Site web", 
  "R√©seaux sociaux", 
  "Portails immobiliers", 
  "Network", 
  "Repeaters", 
  "Recommandations",
  "Apporteur d'affaire",
  "Idealista",
  "Le Figaro",
  "Properstar",
  "Property Cloud",
  "L'express Property",
  "James Edition",
  "Annonce",
  "Email",
  "T√©l√©phone",
  "Autre",
  "Recommendation"
];

const MobileGeneralInfoSection: React.FC<MobileGeneralInfoSectionProps> = ({
  lead,
  onDataChange,
  countries = [],
  sources = DEFAULT_SOURCES
}) => {
  const [headerHeight, setHeaderHeight] = useState<number>(0);
  const [isHeaderMeasured, setIsHeaderMeasured] = useState(false);
  
  useEffect(() => {
    const measureHeader = () => {
      const headerElement = document.querySelector('.bg-loro-sand');
      if (headerElement) {
        const height = headerElement.getBoundingClientRect().height;
        setHeaderHeight(height);
        setIsHeaderMeasured(true);
      }
    };
    
    measureHeader();
    window.addEventListener('resize', measureHeader);
    const timeoutId = setTimeout(measureHeader, 300);
    
    return () => {
      window.removeEventListener('resize', measureHeader);
      clearTimeout(timeoutId);
    };
  }, []);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    onDataChange({ [name]: value });
  };

  const dynamicTopMargin = isHeaderMeasured 
    ? `${Math.max(headerHeight + 8, 32)}px` 
    : 'calc(32px + 4rem)';

  return (
    <div 
      className="space-y-3 pt-4" 
      style={{ marginTop: dynamicTopMargin }}
    >
      <h2 className="text-sm font-futura uppercase tracking-wider text-gray-800 pb-2 border-b mb-4">Information G√©n√©rale</h2>
      
      <FormInput
        label="Titre"
        name="salutation"
        type="select"
        value={lead.salutation || ''}
        onChange={handleInputChange}
        options={[
          { value: 'M.', label: 'Monsieur' },
          { value: 'Mme', label: 'Madame' },
        ]}
        placeholder="S√©lectionner un titre"
      />
      
      <FormInput
        label="Nom"
        name="name"
        required
        value={lead.name}
        onChange={handleInputChange}
        placeholder="Nom complet"
      />

      <FormInput
        label="Email"
        name="email"
        type="email"
        value={lead.email || ''}
        onChange={handleInputChange}
        placeholder="Adresse email"
      />
      
      <FormInput
        label="T√©l√©phone"
        name="phone"
        type="tel-with-code"
        value={lead.phone || ''}
        onChange={handleInputChange}
        placeholder="Num√©ro de t√©l√©phone"
        countryCode={lead.phoneCountryCode || '+33'}
        countryCodeDisplay={lead.phoneCountryCodeDisplay || 'üá´üá∑'}
        onCountryCodeChange={(code) => {
          onDataChange({ phoneCountryCode: code });
          
          // Get flag emoji for the country code
          const codeToCountry: Record<string, string> = {
            '+1': 'üá∫üá∏', '+33': 'üá´üá∑', '+44': 'üá¨üáß', '+34': 'üá™üá∏', '+39': 'üáÆüáπ',
            '+41': 'üá®üá≠', '+49': 'üá©üá™', '+32': 'üáßüá™', '+31': 'üá≥üá±', '+351': 'üáµüáπ',
            '+30': 'üá¨üá∑', '+46': 'üá∏üá™', '+47': 'üá≥üá¥', '+45': 'üá©üá∞', '+358': 'üá´üáÆ',
            '+420': 'üá®üáø', '+48': 'üáµüá±', '+36': 'üá≠üá∫', '+43': 'üá¶üáπ', '+353': 'üáÆüá™',
            '+352': 'üá±üá∫', '+377': 'üá≤üá®', '+7': 'üá∑üá∫', '+380': 'üá∫üá¶', '+40': 'üá∑üá¥',
            '+359': 'üáßüá¨', '+385': 'üá≠üá∑', '+386': 'üá∏üáÆ', '+381': 'üá∑üá∏', '+212': 'üá≤üá¶',
            '+213': 'üá©üáø', '+216': 'üáπüá≥', '+20': 'üá™üá¨', '+27': 'üáøüá¶', '+234': 'üá≥üá¨',
            '+81': 'üáØüáµ', '+86': 'üá®üá≥', '+91': 'üáÆüá≥', '+65': 'üá∏üá¨', '+82': 'üá∞üá∑',
            '+971': 'üá¶üá™', '+966': 'üá∏üá¶', '+974': 'üá∂üá¶', '+961': 'üá±üáß', '+972': 'üáÆüá±',
            '+90': 'üáπüá∑', '+852': 'üá≠üá∞', '+55': 'üáßüá∑', '+52': 'üá≤üáΩ', '+54': 'üá¶üá∑',
            '+56': 'üá®üá±', '+57': 'üá®üá¥', '+58': 'üáªüá™', '+51': 'üáµüá™', '+61': 'üá¶üá∫',
            '+64': 'üá≥üáø', '+66': 'üáπüá≠', '+84': 'üáªüá≥', '+60': 'üá≤üáæ', '+62': 'üáÆüá©',
            '+63': 'üáµüá≠'
          };
          
          const flagEmoji = codeToCountry[code] || 'üåç';
          onDataChange({ phoneCountryCodeDisplay: flagEmoji });
        }}
        searchable
      />
      
      <FormInput
        label="Nationalit√©"
        name="nationality"
        value={lead.nationality || ''}
        onChange={handleInputChange}
        placeholder="Nationalit√©"
      />
      
      <FormInput
        label="Langue pr√©f√©r√©e"
        name="preferredLanguage"
        type="select"
        value={lead.preferredLanguage || ''}
        onChange={handleInputChange}
        options={LANGUAGE_OPTIONS}
        placeholder="S√©lectionner une langue"
      />
      
      <FormInput
        label="Lien de l'annonce vu"
        name="url"
        value={lead.url || ''}
        onChange={handleInputChange}
        placeholder="URL de l'annonce immobili√®re"
      />
      
      <FormInput
        label="Source"
        name="source"
        type="select"
        value={lead.source || ''}
        onChange={handleInputChange}
        options={sources.map(source => ({ value: source, label: source }))}
        placeholder="S√©lectionner une source"
      />
      
      <FormInput
        label="R√©f√©rence de propri√©t√©"
        name="propertyReference"
        value={lead.propertyReference || ''}
        onChange={handleInputChange}
        placeholder="R√©f√©rence de propri√©t√©"
      />
    </div>
  );
};

export default MobileGeneralInfoSection;
